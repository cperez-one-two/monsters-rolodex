{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","user","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAGaA,EAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHPC,EAAW,SAACR,GAAD,OACvB,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAACN,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJTM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACtB,uBACGZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCDG,E,kDAxCZ,aAAe,IAAD,8BACX,gBAiBHH,aAAe,SAACI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACVb,SAAU,GACVU,YAAa,IAJL,E,qDAYd,WAAqB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OACtDA,EAAIC,OAAOF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAET,SAAUkB,Y,oBAQ1D,WACG,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACtCA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEnD,OACG,sBAAK9B,UAAU,MAAf,UACG,kDACA,cAAC,EAAD,CACGW,YAAY,qBACZC,aAAce,KAAKf,eAEtB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCdI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0231e629.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n\t<div className='card-container'>\n\t\t<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\n\t\t<h2>{props.monster.name}</h2>\n\t\t<p>{props.monster.email}</p>\n\t</div>\n);\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component'\n\nexport const CardList = (props) => (\n\t<div className='card-list'>\n\t\t{props.monsters.map((monster) => (\n\t\t\t<Card key={monster.id} monster={monster}/>\n\t\t))}\n\t</div>\n);\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n   <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n   />\n);\n","import React, { Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n   constructor() {\n      super();\n      this.state = {\n         monsters: [],\n         searchField: \"\",\n      };\n\n      // Allows `this` to be used in our `handleChange` function\n      // Arrow function syntax allows you to skip this step\n      //this.handleChange = this.handleChange.bind(this);\n   }\n\n   componentDidMount() {\n      fetch(\"https://jsonplaceholder.typicode.com/users\").then((res) =>\n         res.json().then((user) => this.setState({ monsters: user }))\n      );\n   }\n\n   handleChange = (e) => {\n      this.setState({ searchField: e.target.value });\n   }\n\n   render() {\n      const { monsters, searchField } = this.state;\n      const filteredMonsters = monsters.filter((monster) =>\n         monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n      return (\n         <div className=\"App\">\n            <h1>Monsters Rolodex</h1>\n            <SearchBox\n               placeholder=\"Search monsters...\"\n               handleChange={this.handleChange}\n            />\n            <CardList monsters={filteredMonsters} />\n         </div>\n      );\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}